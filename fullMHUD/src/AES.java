
import java.awt.Color;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author khavy
 */
public class AES extends javax.swing.JFrame {

    private  static AES checkAES =null;
    public AES() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(AES.DISPOSE_ON_CLOSE);
    }
    
     public static AES testGuiAES(){
        if(checkAES == null){
            checkAES = new AES();
        }
        return checkAES;
    }

    public static int randomNumber(int min, int max) {
        return new Random().nextInt((max - min) + 1) + min;
    }

    public String randomKEY(int numberOfCharactor) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < numberOfCharactor; i++) {
            int number = randomNumber(0, 127);
            char ch = (char) number;
            sb.append(ch);
        }
        return sb.toString();
    }

    public String encrypt(String strToEncrypt, String myKey) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {
        if (strToEncrypt.equals("") == false && myKey.equals("") == false) {
            String SECRET_KEY = myKey;
            SecretKeySpec skeySpec = new SecretKeySpec(SECRET_KEY.getBytes(), "AES");
            String original = strToEncrypt;
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
            byte[] byteEncrypted = cipher.doFinal(original.getBytes());
            String encrypted = Base64.getEncoder().encodeToString(byteEncrypted);
            return encrypted;
        }
        return null;
    }

    public String Decrypt(String strToDEncrypt, String myKey) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {

        if (strToDEncrypt.equals("") == false && myKey.equals("") == false) {
            String SECRET_KEY = myKey;
            SecretKeySpec skeySpec = new SecretKeySpec(SECRET_KEY.getBytes(), "AES");
            String original = strToDEncrypt;
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec);

            try {

                byte[] Decrypted = Base64.getDecoder().decode(original);

                byte[] bytedDEcrypted = cipher.doFinal(Decrypted);
                String planetxt = new String(bytedDEcrypted);
                return planetxt;
            } catch (IllegalStateException ex) {
                return null;
            } catch (IllegalBlockSizeException ex) {
                return null;
            } catch (BadPaddingException ex) {
                return null;
            } catch (IllegalArgumentException ex) {
                return null;
            }

        }

        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnExportKeyAES = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCipherText = new javax.swing.JTextArea();
        btnTextEncrypt = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDecrypt = new javax.swing.JTextArea();
        btnDecryption = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cbxkey = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtkeyhand = new javax.swing.JTextField();
        rdbrandom = new javax.swing.JRadioButton();
        rdbhand = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblengthhand = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbbyte = new javax.swing.JLabel();
        txtKeyrandom = new javax.swing.JTextField();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        menuFile = new javax.swing.JMenuItem();
        menuFile1 = new javax.swing.JMenuItem();
        menuFile2 = new javax.swing.JMenuItem();
        menuFile3 = new javax.swing.JMenuItem();
        menuFile4 = new javax.swing.JMenuItem();
        menuFile5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("AES");

        btnExportKeyAES.setBackground(new java.awt.Color(0, 0, 0));
        btnExportKeyAES.setForeground(new java.awt.Color(255, 255, 255));
        btnExportKeyAES.setText("CREATE RANDOM  KEY");
        btnExportKeyAES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportKeyAESActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("Secrect KEY random:");

        txtInput.setColumns(20);
        txtInput.setLineWrap(true);
        txtInput.setRows(5);
        jScrollPane1.setViewportView(txtInput);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 255));
        jLabel5.setText("PLAIN TEXT");

        jLabel6.setForeground(new java.awt.Color(0, 0, 255));
        jLabel6.setText("CIPHER TEXT");

        txtCipherText.setColumns(20);
        txtCipherText.setLineWrap(true);
        txtCipherText.setRows(5);
        txtCipherText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCipherTextKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtCipherText);

        btnTextEncrypt.setBackground(new java.awt.Color(0, 0, 0));
        btnTextEncrypt.setForeground(new java.awt.Color(255, 255, 255));
        btnTextEncrypt.setText("ENCRYPTION");
        btnTextEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTextEncryptActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setText("PLAIN TEXT");

        txtDecrypt.setColumns(20);
        txtDecrypt.setLineWrap(true);
        txtDecrypt.setRows(5);
        txtDecrypt.setBorder(new javax.swing.border.MatteBorder(null));
        jScrollPane3.setViewportView(txtDecrypt);

        btnDecryption.setBackground(new java.awt.Color(0, 0, 0));
        btnDecryption.setForeground(new java.awt.Color(255, 255, 255));
        btnDecryption.setText("DECRYPTION");
        btnDecryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptionActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 102));
        jLabel8.setText("HƯỚNG DẪN SỬ DỤNG");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel8MouseReleased(evt);
            }
        });

        cbxkey.setForeground(new java.awt.Color(0, 0, 102));
        cbxkey.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128 bit", "192 bit", "256 bit" }));
        cbxkey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxkeyActionPerformed(evt);
            }
        });

        jLabel10.setText("KEY random LENGTH:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Secrect KEY hand:");

        txtkeyhand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtkeyhandKeyReleased(evt);
            }
        });

        buttonGroup1.add(rdbrandom);
        rdbrandom.setForeground(new java.awt.Color(51, 51, 255));
        rdbrandom.setSelected(true);
        rdbrandom.setText("AUTO RANDOM");

        buttonGroup1.add(rdbhand);
        rdbhand.setForeground(new java.awt.Color(0, 0, 255));
        rdbhand.setText("HAND");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Choose key type");

        jLabel12.setText("KEY hand LENGHT:");

        jLabel13.setText("bit");

        lblengthhand.setForeground(new java.awt.Color(255, 0, 0));
        lblengthhand.setText("0");

        jLabel14.setText("byte");

        lbbyte.setForeground(new java.awt.Color(255, 0, 0));
        lbbyte.setText("0");

        jMenu3.setText("File");

        menuFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuFile.setText("Mở Menu");
        menuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileActionPerformed(evt);
            }
        });
        jMenu3.add(menuFile);

        menuFile1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        menuFile1.setText("Mở AES");
        menuFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFile1ActionPerformed(evt);
            }
        });
        jMenu3.add(menuFile1);

        menuFile2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        menuFile2.setText("Mở RSA");
        menuFile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFile2ActionPerformed(evt);
            }
        });
        jMenu3.add(menuFile2);

        menuFile3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        menuFile3.setText("Mở BowlsFish");
        menuFile3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFile3ActionPerformed(evt);
            }
        });
        jMenu3.add(menuFile3);

        menuFile4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_QUOTE, 0));
        menuFile4.setText("Tắt tất cả mã hóa");
        menuFile4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFile4ActionPerformed(evt);
            }
        });
        jMenu3.add(menuFile4);

        menuFile5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        menuFile5.setText("Tắt chương trình");
        menuFile5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFile5ActionPerformed(evt);
            }
        });
        jMenu3.add(menuFile5);

        jMenuBar2.add(jMenu3);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExportKeyAES)
                        .addGap(116, 116, 116)
                        .addComponent(jLabel12)
                        .addGap(28, 28, 28)
                        .addComponent(lblengthhand)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdbhand)
                        .addGap(205, 205, 205))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxkey, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtKeyrandom)
                                    .addComponent(txtkeyhand)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnDecryption)
                                        .addGap(106, 106, 106))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnTextEncrypt)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(1, 58, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbbyte)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel14))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE)))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(258, 258, 258)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(rdbrandom))
                                .addGap(125, 125, 125))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxkey, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel4)
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(lblengthhand)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbrandom)
                            .addComponent(txtKeyrandom, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExportKeyAES)
                            .addComponent(rdbhand))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtkeyhand, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbbyte, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(btnTextEncrypt)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnDecryption))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTextEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTextEncryptActionPerformed

        if (rdbrandom.isSelected()) {
            try {
                new String(Base64.getDecoder().decode(txtKeyrandom.getText()));
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(rootPane, "KEY RANDOM không hợp lệ ", "REQUEST CREATE KEY RANDOM AGAIN", JOptionPane.ERROR_MESSAGE);
                txtKeyrandom.requestFocus();

                return;
            }
            if (txtKeyrandom.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Bạn chưa tạo key random \n Chọn Key random LENGTH và nhấn create random key để tiến hành tạo key ", "REQUEST CREATE KEY RANDOM", JOptionPane.WARNING_MESSAGE);
                txtKeyrandom.requestFocus();

                return;
            }
            try {
                txtCipherText.setText(encrypt(txtInput.getText(), new String(Base64.getDecoder().decode(txtKeyrandom.getText()))));
                lbbyte.setText(txtCipherText.getText().length() + "");
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            
            if (txtkeyhand.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Bạn chưa tạo key HAND ", "REQUEST CREATE KEY HAND", JOptionPane.WARNING_MESSAGE);
                txtKeyrandom.requestFocus();

                return;
            }
            if (lblengthhand.getText().equals("128") == false && lblengthhand.getText().equals("192") == false && lblengthhand.getText().equals("256") == false) {
                JOptionPane.showMessageDialog(rootPane, "KEY HAND không hợp lệ \n KEY phải có độ dài 128 bit hoặc 192 bit hoặc 256 bit ", "REQUEST CREATE KEY HAND AGAIN", JOptionPane.ERROR_MESSAGE);
                txtkeyhand.requestFocus();

                return;
            }
            String s=new String(txtkeyhand.getText());
            for(int i=0;i<s.length();i++)
            {
                if((int)s.charAt(i)>=128 || (int)s.charAt(i)<0)
                {
                JOptionPane.showMessageDialog(rootPane, "KEY HAND có kí tự -"+s.charAt(i)+ "- không hợp lệ \n ", "REQUEST CREATE KEY HAND AGAIN", JOptionPane.ERROR_MESSAGE);
                txtkeyhand.requestFocus();

                return;
                }
            }
            try {
                txtCipherText.setText(encrypt(txtInput.getText(), txtkeyhand.getText()));
                lbbyte.setText(txtCipherText.getText().length() + "");
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnTextEncryptActionPerformed

    private void btnExportKeyAESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportKeyAESActionPerformed
        byte[] bytekey = null;
        if (cbxkey.getSelectedItem().equals("128 bit")) {
            bytekey = randomKEY(16).getBytes();
        }
        if (cbxkey.getSelectedItem().equals("192 bit")) {
            bytekey = randomKEY(24).getBytes();
        }
        if (cbxkey.getSelectedItem().equals("256 bit")) {
            bytekey = randomKEY(32).getBytes();
        }

        String base64Key = Base64.getEncoder().encodeToString(bytekey);
        txtKeyrandom.setText(base64Key);


    }//GEN-LAST:event_btnExportKeyAESActionPerformed

    private void btnDecryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptionActionPerformed

        if (rdbrandom.isSelected()) {
            if (txtKeyrandom.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Bạn chưa tạo key random \n Chọn Key random LENGTH và nhấn create random key để tiến hành tạo key ", "REQUEST CREATE KEY RANDOM", JOptionPane.WARNING_MESSAGE);
                txtKeyrandom.requestFocus();

                return;
            }

            try {
                // TODO add your handling code here:
                String plainText = Decrypt(txtCipherText.getText(), new String(Base64.getDecoder().decode(txtKeyrandom.getText())));
                if (plainText == null) {
                    Random rd = new Random();
                    int test = rd.nextInt(10);
                    switch (test) {
                        case 0: {
                            txtDecrypt.setText("NULL (thử mã khác đi \n nhân phẩm bạn kém quá)");
                            break;
                        }
                        case 1: {
                            txtDecrypt.setText("NULL (gà quá mà)");
                            break;
                        }
                        case 2: {
                            txtDecrypt.setText("NULL (vận khí đen vậy)");
                            break;
                        }
                        case 3: {
                            txtDecrypt.setText("NULL (cố lên, gần được rồi)");
                            break;
                        }
                        case 4: {
                            txtDecrypt.setText("NULL (Liên hệ anh vy đẹp trai \n để  giải mã)");
                            break;
                        }
                        case 5: {
                            txtDecrypt.setText("NULL (Vy đẹp trai)");
                            break;
                        }
                        case 6: {
                            txtDecrypt.setText("NULL (Xin sdt làm quen để được giải mã)");
                            break;
                        }
                        case 7: {
                            txtDecrypt.setText("NULL (xíu nữa được rồi)");
                            break;
                        }
                        case 8: {
                            txtDecrypt.setText("NULL (Tối ae mình  nhậu \n rồi cùng nhau giải mã nhé )");
                            break;
                        }
                        case 9: {
                            txtDecrypt.setText("NULL (Hãy cố gắng khi bạn còn có thể)");
                            break;
                        }
                        case 10: {
                            txtDecrypt.setText("NULL (Chúc bạn may mắn lần sau)");
                            break;
                        }
                    }

                } else {
                    txtDecrypt.setText(plainText);
                }
                lbbyte.setText(txtCipherText.getText().length() + "");

            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);

            } catch (BadPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (txtkeyhand.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Bạn chưa tạo key HAND ", "REQUEST CREATE KEY HAND", JOptionPane.WARNING_MESSAGE);
                txtKeyrandom.requestFocus();

                return;
            }
            if (lblengthhand.getText().equals("128") == false && lblengthhand.getText().equals("192") == false && lblengthhand.getText().equals("256") == false) {
                JOptionPane.showMessageDialog(rootPane, "KEY HAND không hợp lệ \n KEY phải có độ dài 128 bit hoặc 192 bit hoặc 256 bit ", "REQUEST CREATE KEY HAND AGAIN", JOptionPane.ERROR_MESSAGE);
                txtkeyhand.requestFocus();

                return;
            }
            try {
                String plainText = Decrypt(txtCipherText.getText(), txtkeyhand.getText());
                if (plainText == null) {
                    Random rd = new Random();
                    int test = rd.nextInt(10);
                    switch (test) {
                        case 0: {
                            txtDecrypt.setText("NULL (thử mã khác đi \n nhân phẩm bạn kém quá)");
                            break;
                        }
                        case 1: {
                            txtDecrypt.setText("NULL (Thử mã khác đi nào)");
                            break;
                        }
                        case 2: {
                            txtDecrypt.setText("NULL (vận khí đen vậy)");
                            break;
                        }
                        case 3: {
                            txtDecrypt.setText("NULL (cố lên, gần được rồi)");
                            break;
                        }
                        case 4: {
                            txtDecrypt.setText("NULL (Liên hệ anh vy đẹp trai \n để  giải mã)");
                            break;
                        }
                        case 5: {
                            txtDecrypt.setText("NULL (Gà quá mà)");
                            break;
                        }
                        case 6: {
                            txtDecrypt.setText("NULL (Xin sdt làm quen để được giải mã)");
                            break;
                        }
                        case 7: {
                            txtDecrypt.setText("NULL (xíu nữa được rồi)");
                            break;
                        }
                        case 8: {
                            txtDecrypt.setText("NULL (Tối ae mình  nhậu \n rồi cùng nhau giải mã nhé )");
                            break;
                        }
                        case 9: {
                            txtDecrypt.setText("NULL (Hãy cố gắng khi bạn còn có thể)");
                            break;
                        }
                        case 10: {
                            txtDecrypt.setText("NULL (Chúc bạn may mắn lần sau)");
                            break;
                        }
                    }

                } else {
                    txtDecrypt.setText(plainText);
                }
                lbbyte.setText(txtCipherText.getText().length() + "");
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDecryptionActionPerformed

    private void cbxkeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxkeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxkeyActionPerformed

    private void txtkeyhandKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtkeyhandKeyReleased
        // TODO add your handling code here:
        lblengthhand.setText(txtkeyhand.getText().length() * 8 + "");
    }//GEN-LAST:event_txtkeyhandKeyReleased

    private void txtCipherTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCipherTextKeyReleased
        // TODO add your handling code here:
        lbbyte.setText(txtCipherText.getText().length() + "");
    }//GEN-LAST:event_txtCipherTextKeyReleased

    private void jLabel8MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseReleased
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Có 2 LỰA CHỌN ( CHOOSE KEY TYPE ) tại key để trước khi mã hóa \n"
                + "---*LỰA CHỌN 1 ( AUTO RANDOM ) -  DÙNG AUTO SINH KEY--- \n"
                + "Chọn số bít của key cần tạo thông qua KEY RANDOM LENGTH \n"
                + "Sau đó nhấn CREATE RANDOM KEY \n"
                + "Sau khi sinh key xong thì mã hóa như bình thường \n"
                + "---*LỰA CHỌN 2( HAND ) - DÙNG TAY SINH KEY--- \n"
                + "Nhập key bằng tay vào ô SECRET KEY HAND N"
                + "Lưu ý key nhập có độ dài 128 bit hoặc 192 bit hoặc 256 bit \n"
                + "Sau khi nhập key xong thì mã hóa như bình thường \n"
                + "--------------------------.-----------------------", "HƯỚNG DẪN SỬ DỤNG", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jLabel8MouseReleased

    //Tắt tất cả các mã hóa đang chạy qua phím `
    private void menuFile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFile4ActionPerformed
        AES.testGuiAES().setVisible(false);
       RSA.testGuiRSA().setVisible(false);
        Blowfish.testBlowFish().setVisible(false);
    }//GEN-LAST:event_menuFile4ActionPerformed

     //Mở nhanh RSA qua F3
    private void menuFile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFile2ActionPerformed
        RSA.testGuiRSA().setVisible(true);
    }//GEN-LAST:event_menuFile2ActionPerformed

    //Mở nhanh AES qua F2 ->Thông báo AES đã hoạt động
    private void menuFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFile1ActionPerformed
        JOptionPane.showMessageDialog(null,"Form AES đã hoạt động!"
                ,"Thông báo",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuFile1ActionPerformed

    //Tắt nhanh chương trình qua phím ESC
    private void menuFile5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFile5ActionPerformed
        int n = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn thoát", "EXIT?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null);
        
        if(n == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_menuFile5ActionPerformed

    private void menuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileActionPerformed
        MainGUI.testMainGUI().setVisible(true);
    }//GEN-LAST:event_menuFileActionPerformed

    private void menuFile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFile3ActionPerformed
         Blowfish.testBlowFish().setVisible(true);
    }//GEN-LAST:event_menuFile3ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecryption;
    private javax.swing.JButton btnExportKeyAES;
    private javax.swing.JButton btnTextEncrypt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxkey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbbyte;
    private javax.swing.JLabel lblengthhand;
    private javax.swing.JMenuItem menuFile;
    private javax.swing.JMenuItem menuFile1;
    private javax.swing.JMenuItem menuFile2;
    private javax.swing.JMenuItem menuFile3;
    private javax.swing.JMenuItem menuFile4;
    private javax.swing.JMenuItem menuFile5;
    private javax.swing.JRadioButton rdbhand;
    private javax.swing.JRadioButton rdbrandom;
    private javax.swing.JTextArea txtCipherText;
    private javax.swing.JTextArea txtDecrypt;
    private javax.swing.JTextArea txtInput;
    private javax.swing.JTextField txtKeyrandom;
    private javax.swing.JTextField txtkeyhand;
    // End of variables declaration//GEN-END:variables

}
